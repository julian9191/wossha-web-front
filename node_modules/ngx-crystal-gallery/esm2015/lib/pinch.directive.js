/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Directive, ElementRef, HostListener, Input, Output, EventEmitter } from '@angular/core';
export class PinchDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.scale = 1;
        this.initialScale = 1;
        this.moveX = 0;
        this.moveY = 0;
        this.initialMoveX = 0;
        this.initialMoveY = 0;
        this.isNextImageLoaded = true;
        this.events = new EventEmitter();
        this.elem = this.elementRef.nativeElement;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    touchstartHandler(event) {
        this.elem.style.transformOrigin = '0 0';
    }
    /**
     * @param {?} event
     * @return {?}
     */
    touchmoveHandler(event) {
        /** @type {?} */
        let touches = event.touches;
        if (touches.length === 1 && this.scale === 1 && !this.eventType || this.eventType == 'swipe') {
            event.preventDefault();
            if (!this.isNextImageLoaded) {
                return;
            }
            if (!this.eventType) {
                this.startX = event.touches[0].pageX;
                this.startY = event.touches[0].pageY;
            }
            this.eventType = 'swipe';
            this.moveX = this.initialMoveX + (event.touches[0].pageX - this.startX);
            this.moveY = 0;
            this.transformElem(0);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    touchendHandler(event) {
        /** @type {?} */
        let touches = event.touches;
        /** @type {?} */
        let img = this.elem.getElementsByTagName("img")[0];
        if (!this.isNextImageLoaded) {
            return;
        }
        if (this.scale < 1) {
            this.scale = 1;
        }
        if (this.moveY > 0) {
            this.moveY = 0;
        }
        if (this.moveX > 100) {
            this.slide('prev');
        }
        else if (this.moveX < -100) {
            this.slide('next');
        }
        else {
            this.moveX = 0;
        }
        this.initialScale = this.scale;
        this.initialMoveX = this.moveX;
        this.initialMoveY = this.moveY;
        this.transformElem(200);
        this.eventType = 'touchend';
        if (touches.length == 0) {
            this.eventType = '';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    slide(event) {
        this.onSlide(event);
        if (event === 'prev') {
            this.moveX = window.innerWidth + 8;
            if (this.isFirst) {
                this.moveX = 0;
            }
        }
        if (event === 'next') {
            this.moveX = -window.innerWidth - 8;
            if (this.isLast) {
                this.moveX = 0;
            }
        }
        this.isNextImageLoaded = false;
        setTimeout(() => {
            this.moveX = 0;
            this.initialMoveX = 0;
            this.isNextImageLoaded = true;
        }, 200);
    }
    /**
     * @param {?} evenType
     * @return {?}
     */
    onSlide(evenType) {
        this.events.emit(evenType);
    }
    /**
     * @param {?=} duration
     * @return {?}
     */
    transformElem(duration = 50) {
        /** @type {?} */
        let matrixVal = 'matrix(' + Number(this.scale) + ',' + 0 + ',' + 0 + ',' + Number(this.scale) + ',' + Number(this.moveX) + ',' + Number(this.moveY) + ')';
        this.elem.style.transition = 'all ' + duration + 'ms';
        this.elem.style.transform = matrixVal;
        this.elem.style.webkitTransform = matrixVal;
    }
}
PinchDirective.decorators = [
    { type: Directive, args: [{
                selector: '[pinch]'
            },] },
];
/** @nocollapse */
PinchDirective.ctorParameters = () => [
    { type: ElementRef }
];
PinchDirective.propDecorators = {
    isLast: [{ type: Input }],
    isFirst: [{ type: Input }],
    events: [{ type: Output }],
    touchstartHandler: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
    touchmoveHandler: [{ type: HostListener, args: ['touchmove', ['$event'],] }],
    touchendHandler: [{ type: HostListener, args: ['touchend', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    PinchDirective.prototype.elem;
    /** @type {?} */
    PinchDirective.prototype.eventType;
    /** @type {?} */
    PinchDirective.prototype.scale;
    /** @type {?} */
    PinchDirective.prototype.initialScale;
    /** @type {?} */
    PinchDirective.prototype.startX;
    /** @type {?} */
    PinchDirective.prototype.startY;
    /** @type {?} */
    PinchDirective.prototype.moveX;
    /** @type {?} */
    PinchDirective.prototype.moveY;
    /** @type {?} */
    PinchDirective.prototype.initialMoveX;
    /** @type {?} */
    PinchDirective.prototype.initialMoveY;
    /** @type {?} */
    PinchDirective.prototype.moveXC;
    /** @type {?} */
    PinchDirective.prototype.moveYC;
    /** @type {?} */
    PinchDirective.prototype.distance;
    /** @type {?} */
    PinchDirective.prototype.initialDistance;
    /** @type {?} */
    PinchDirective.prototype.isNextImageLoaded;
    /** @type {?} */
    PinchDirective.prototype.isLast;
    /** @type {?} */
    PinchDirective.prototype.isFirst;
    /** @type {?} */
    PinchDirective.prototype.events;
    /** @type {?} */
    PinchDirective.prototype.elementRef;
}

//# sourceMappingURL=data:application/json;base64,