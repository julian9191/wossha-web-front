/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, HostBinding, HostListener, ViewChild, ElementRef, ChangeDetectorRef } from '@angular/core';
export class LightboxMobileComponent {
    /**
     * @param {?} elementRef
     * @param {?} ref
     */
    constructor(elementRef, ref) {
        this.elementRef = elementRef;
        this.ref = ref;
        this.currImage = {
            show: false,
            loaded: false,
            index: 0
        };
        this.prevImage = {
            loaded: false
        };
        this.nextImage = {
            loaded: false
        };
        this.close = new EventEmitter();
        this.lightboxShown = false;
    }
    /**
     * @return {?}
     */
    get images() {
        return this.data.images;
    }
    /**
     * @return {?}
     */
    get config() {
        return this.data.config;
    }
    /**
     * @return {?}
     */
    get index() {
        return this.currImage.index;
    }
    /**
     * @return {?}
     */
    get currImagePath() {
        /** @type {?} */
        let image = this.images[this.index];
        if (!image) {
            return false;
        }
        if (image.path) {
            image.full = image.path;
        }
        return image;
    }
    /**
     * @return {?}
     */
    get prevImagePath() {
        if (this.prevIndex < 0 && this.config.loop) {
            this.prevIndex = this.latestImageIndex;
        }
        /** @type {?} */
        let image = this.images[this.prevIndex];
        if (image && image.path) {
            image.full = image.path;
        }
        return image;
    }
    /**
     * @return {?}
     */
    get nextImagePath() {
        /** @type {?} */
        let image = this.images[this.nextIndex];
        if (image && image.path) {
            image.full = image.path;
        }
        return image;
    }
    /**
     * @return {?}
     */
    get isFirst() {
        if (this.config.loop) {
            return false;
        }
        else {
            return this.index === 0;
        }
    }
    /**
     * @return {?}
     */
    get isLast() {
        if (this.config.loop) {
            return false;
        }
        else {
            return this.index === this.latestImageIndex;
        }
    }
    /**
     * @return {?}
     */
    get latestImageIndex() {
        return this.images.length - 1;
    }
    /**
     * @return {?}
     */
    get isLandscape() {
        return window.innerWidth > window.innerHeight;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onWindowResize(event) {
        this.landscapeMode = this.isLandscape;
        this.ref.detectChanges();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.currImage.index = this.config.index;
        this.prevIndex = this.currImage.index - 1;
        this.nextIndex = this.currImage.index + 1;
        this.showLightbox();
    }
    /**
     * @return {?}
     */
    showLightbox() {
        this.currImage.show = true;
        setTimeout(() => {
            this.lightboxShown = true;
        }, 30);
    }
    /**
     * @return {?}
     */
    closeLightbox() {
        this.lightboxShown = false;
        setTimeout(() => {
            this.close.emit(true);
        }, 200);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    slide(event) {
        if (event === 'next') {
            if (this.isLast) {
                return;
            }
            else {
                setTimeout(() => {
                    this.currImage.index++;
                }, 200);
            }
            if (this.index === this.latestImageIndex) {
                setTimeout(() => {
                    this.currImage.index = 0;
                }, 200);
            }
            setTimeout(() => {
                this.afterSlide('next');
            }, 300);
        }
        if (event === 'prev') {
            if (this.isFirst) {
                return;
            }
            else {
                setTimeout(() => {
                    this.currImage.index--;
                }, 200);
            }
            if (this.index === 0) {
                setTimeout(() => {
                    this.currImage.index = this.latestImageIndex;
                }, 200);
            }
            setTimeout(() => {
                this.afterSlide('prev');
            }, 300);
        }
    }
    /**
     * @param {?} eventType
     * @return {?}
     */
    afterSlide(eventType) {
        this.currImage.show = true;
        if (this.index === this.latestImageIndex && this.config.loop) {
            this.nextIndex = 0;
        }
        else {
            this.nextIndex = this.index + 1;
        }
        if (this.index === 0 && this.config.loop) {
            this.prevIndex = this.latestImageIndex;
        }
        else {
            this.prevIndex = this.index - 1;
        }
        if (eventType === 'prev') {
            if (!this.prevImage.loaded) {
                this.currImage.loaded = false;
                this.prevImage.loaded = false;
            }
            if (!this.currImage.loaded) {
                this.nextImage.loaded = false;
            }
        }
        if (eventType === 'next') {
            if (!this.nextImage.loaded) {
                this.currImage.loaded = false;
                this.nextImage.loaded = false;
            }
            if (!this.currImage.loaded) {
                this.prevImage.loaded = false;
            }
        }
        this.defaultWrapperPosition();
        this.ref.detectChanges();
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    onImageLoaded(elem) {
        this[elem].loaded = true;
        this.ref.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    handlePinchEvents($event) {
        if ($event === 'prev') {
            this.slide('prev');
        }
        if ($event === 'next') {
            this.slide('next');
        }
    }
    /**
     * @return {?}
     */
    defaultWrapperPosition() {
        /** @type {?} */
        let elem = this.wrapperEl.nativeElement;
        elem.style.transition = 'all 0ms';
        elem.style.transform = 'matrix(1, 0, 0, 1, 0, 0)';
        elem.style.webkitTransform = 'matrix(1, 0, 0, 1, 0, 0)';
    }
}
LightboxMobileComponent.decorators = [
    { type: Component, args: [{
                selector: 'crystal-lightbox-mobile',
                template: `<div class="cg-back" (click)="closeLightbox()"></div>

<div 
	class="cg-wrapper" 
	[class.cg-landscape]="landscapeMode"
	pinch [isLast]="isLast" [isFirst]="isFirst" (events)="handlePinchEvents($event)"
	#wrapper>
	<div class="cg-image-wrap cg-prev-image">
		<img 
			*ngIf="prevImagePath"
			[src]="prevImagePath.full" 
			[class.cg-hide]="!prevImage.loaded"
			(load)="onImageLoaded('prevImage')"
		/>
		<div class="cg-spinner" *ngIf="!prevImage.loaded && prevImagePath"></div>
	</div>

	<div class="cg-image-wrap cg-curr-image" *ngIf="currImage.show">
		<img 
			[src]="currImagePath?.full" 
			[class.cg-hide]="!currImage.loaded" 
			(load)="onImageLoaded('currImage')"
		/>
		<div class="cg-spinner" *ngIf="!currImage.loaded"></div>
	</div>
	
	<div class="cg-image-wrap cg-next-image">
		<img 
			*ngIf="nextImagePath"
			[src]="nextImagePath.full" 
			[class.cg-hide]="!nextImage.loaded" 
			(load)="onImageLoaded('nextImage')"
		/>
		<div class="cg-spinner" *ngIf="!nextImage.loaded && nextImagePath"></div>
	</div>
</div>`,
                styles: [`._cg-spinner,._cg-spinner:after{border-radius:50%;width:36px;height:36px}._cg-spinner{margin:0 auto;font-size:10px;position:relative;text-indent:-9999em;border-top:4px solid rgba(255,255,255,.2);border-right:4px solid rgba(255,255,255,.2);border-bottom:4px solid rgba(255,255,255,.2);border-left:4px solid #fff;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation:.9s linear infinite load8;animation:.9s linear infinite load8}@-webkit-keyframes load8{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes load8{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}.cg-spinner,.cg-spinner:after,.cg-spinner:before{border-radius:50%;width:10px;height:10px;-webkit-animation:1.5s ease-in-out infinite load7;animation:1.5s ease-in-out infinite load7}.cg-spinner{color:#fff;font-size:10px;margin:0 auto 20px;position:relative;text-indent:-9999em;-webkit-transform:translateZ(0);transform:translateZ(0);-webkit-animation-delay:-.16s;animation-delay:-.16s}.cg-spinner:after,.cg-spinner:before{content:"";position:absolute;top:0}.cg-spinner:before{left:-3em;-webkit-animation-delay:-.32s;animation-delay:-.32s}.cg-spinner:after{left:3em}@-webkit-keyframes load7{0%,100%,80%{box-shadow:0 2.5em 0 -1.3em}40%{box-shadow:0 2.5em 0 0}}@keyframes load7{0%,100%,80%{box-shadow:0 10px 0 -1.3em}40%{box-shadow:0 10px 0 0}}:host(.cg-show){opacity:1}:host(.cg-hide-controls) .cg-close,:host(.cg-hide-controls) .cg-next,:host(.cg-hide-controls) .cg-prev{opacity:0}:host{opacity:0;position:fixed;top:0;left:0;width:100%;height:100%;color:#fff;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;transition:opacity .2s cubic-bezier(.645,.045,.355,1);z-index:10000;background-color:#000}:host .cg-back{background:url("data:image/svg+xml,%3C%3Fxml version%3D%221.0%22 encoding%3D%22UTF-8%22%3F%3E%3Csvg width%3D%2210px%22 height%3D%2216px%22 viewBox%3D%220 0 10 16%22 version%3D%221.1%22 xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22 xmlns%3Axlink%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%22%3E    %3C!-- Generator%3A sketchtool 40.2 (33826) - http%3A%2F%2Fwww.bohemiancoding.com%2Fsketch --%3E    %3Ctitle%3E11A73872-5EBF-46F6-B7C5-142D47A33339%3C%2Ftitle%3E    %3Cdesc%3ECreated with sketchtool.%3C%2Fdesc%3E    %3Cdefs%3E%3C%2Fdefs%3E    %3Cg id%3D%22Interface-1280-x-800%22 stroke%3D%22none%22 stroke-width%3D%221%22 fill%3D%22none%22 fill-rule%3D%22evenodd%22%3E        %3Cg id%3D%22Lot_viewpage_open%22 transform%3D%22translate(-111.000000%2C -296.000000)%22 fill%3D%22%23FFFFFF%22%3E            %3Cg id%3D%22arrows-16px-1_minimal-left%22 transform%3D%22translate(111.000000%2C 296.000000)%22%3E                %3Cpolygon id%3D%22Shape%22 points%3D%228.1 15.7 0.4 8 8.1 0.3 9.6 1.7 3.3 8 9.6 14.3%22%3E%3C%2Fpolygon%3E            %3C%2Fg%3E        %3C%2Fg%3E    %3C%2Fg%3E%3C%2Fsvg%3E") center/12px no-repeat;width:40px;height:40px;opacity:.9;position:fixed;top:0;left:0;z-index:1000}:host .cg-wrapper.cg-landscape .cg-image-wrap img{height:100%}:host .cg-wrapper{transition:none;width:100%;height:100%;display:block}:host .cg-wrapper .cg-image-wrap.cg-prev-image{-webkit-transform:translate3d(calc(-100% - 8px),0,0);transform:translate3d(calc(-100% - 8px),0,0)}:host .cg-wrapper .cg-image-wrap.cg-next-image{-webkit-transform:translate3d(calc(100% + 8px),0,0);transform:translate3d(calc(100% + 8px),0,0)}:host .cg-wrapper .cg-image-wrap{width:100%;height:100%;text-align:center;position:absolute;display:flex;align-items:center;justify-content:center}:host .cg-wrapper .cg-image-wrap img{max-width:100%;max-height:100%;width:auto;height:auto;position:relative}:host .cg-wrapper .cg-image-wrap img.cg-hide{display:none}`]
            },] },
];
/** @nocollapse */
LightboxMobileComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
LightboxMobileComponent.propDecorators = {
    data: [{ type: Input }],
    wrapperEl: [{ type: ViewChild, args: ['wrapper',] }],
    lightboxShown: [{ type: HostBinding, args: ['class.cg-show',] }],
    onWindowResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    LightboxMobileComponent.prototype._index;
    /** @type {?} */
    LightboxMobileComponent.prototype.prevIndex;
    /** @type {?} */
    LightboxMobileComponent.prototype.nextIndex;
    /** @type {?} */
    LightboxMobileComponent.prototype.currImage;
    /** @type {?} */
    LightboxMobileComponent.prototype.prevImage;
    /** @type {?} */
    LightboxMobileComponent.prototype.nextImage;
    /** @type {?} */
    LightboxMobileComponent.prototype.wrapperProp;
    /** @type {?} */
    LightboxMobileComponent.prototype.landscapeMode;
    /** @type {?} */
    LightboxMobileComponent.prototype.close;
    /** @type {?} */
    LightboxMobileComponent.prototype.data;
    /** @type {?} */
    LightboxMobileComponent.prototype.wrapperEl;
    /** @type {?} */
    LightboxMobileComponent.prototype.lightboxShown;
    /** @type {?} */
    LightboxMobileComponent.prototype.elementRef;
    /** @type {?} */
    LightboxMobileComponent.prototype.ref;
}

//# sourceMappingURL=data:application/json;base64,